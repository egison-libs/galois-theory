def group := set G.element

def G.element := list integer

def G.id $n := [1..n]

def G.* $e1 $e2 := map 1#(nth %1 e1) e2

def G.reverse $e :=
  match zip e (G.id (length e)) as multiset (integer, integer) with
    | loop $i (1, length e, _)
        ((#i, $x_i) :: ...)
        [] -> map 1#x_%1 [1..(length e)]

def G.isId $e := e = G.id (length e)

def isGroup $g :=
  any G.isId g &&
  all 1#(member %1 g) (map G.reverse g) &&
  all
    1#(member %1 g)
    (matchAll g as group with
      | $e1 :: $e2 :: _ -> G.* e1 e2)

def G.toCycles $e :=
  match matchAll zip (G.id (length e)) e as multiset (integer, integer) with
      | ($m, !#m & $n) :: _ -> (m, n) as multiset (integer, integer) with
    | loop $i (1, $m)
        (($x_i_1, $x_i_2) :: (loop $j (3, $n_i)
                                ((#x_i_(j - 1), $x_i_j) :: ...)
                                ((#x_i_(n_i), #x_i_1) :: ...)))
        [] -> map (\$i -> map (\$j -> x_i_j) [1..n_i]) [1..m]

def symmetricGroup $n :=
  matchAll [1..n] as multiset integer with
    | loop $i (1, n, _)
        ($a_i :: ...)
        [] -> map (\$i -> a_i) [1..n]

def s3 := symmetricGroup 3

def s4 := symmetricGroup 4

def s5 := symmetricGroup 5

def a3 := commutatorSubgroup s3

def a4 := commutatorSubgroup s4

def a5 := commutatorSubgroup s5

def v4 := commutatorSubgroup a4

def isNormalSubgroup $h $g :=
  all (\(g1, g2) -> eqAs group g1 g2) (map (\ge -> (map (\he -> G.* ge he) h, map (\he -> G.* he ge) h)) g)

def takeUntilBy p xs :=
 match xs as list something with
   | $hs ++ (?p & $x) :: _ -> hs ++ [x]
   | _ -> xs

def genCyclicGroup $e := takeUntilBy 1#(G.isId %1) (scanl G.* e (repeat1 e))

def cyclicSubgroups $g := uniqueAs group (map 1#(genCyclicGroup %1) g)

def generators $g := map head (cyclicSubgroups g)

def genGroup $es :=
  let cgs := map genCyclicGroup es
   in foldl G.** (head cgs) (tail cgs)

def G.product $g1 $g2 :=
  unique
    (matchAll (g1, g2) as (group, group) with
      | ($e1 :: _, $e2 :: _) -> G.* e1 e2)

def G.** $g1 $g2 :=
  let pg := G.product g1 g2
   in match scanl
              (\(pg1, pg2) pg -> let ng := union pg1 (G.product pg2 pg)
                                      in (ng, difference ng pg1))
              (pg, pg)
              (repeat1 pg) as list (group, set G.element) with
        | _ ++ ($g, []) :: _ -> g

def G.// $g1 $g2 :=
  let hs := differenceAs
              (multiset G.element)
              (cyclicSubgroups g1)
              (cyclicSubgroups g2)
   in head
        (concat
           (map
              (\$h ->
                let g2' := G.** h g2
                 in if includeAs group g1 g2'
                      then if includeAs group g2' g1
                        then [h]
                        else [G.** h (G.// g1 g2')]
                      else [])
              hs))

def commutator $e1 $e2 := G.* (G.* e1 e2) (G.* (G.reverse e1) (G.reverse e2))

def commutatorSubgroup $g :=
  let es := unique
              (matchAll g as group with
                | $e1 :: $e2 :: _ -> commutator e1 e2)
   in if isGroup es then es else genGroup es

def isAbelianGroup $g := 1 = length (commutatorSubgroup g)

def isPerfectGroup $g := length g = length (commutatorSubgroup g)
