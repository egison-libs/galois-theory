;;;
;;; Group Theory
;;;
(define $group (set G.element))

(define $G.element (list integer))

;;
;; Basic operations
;;
(define $G.id
  (lambda [$n]
    (between 1 n)))

(define $G.*
  (lambda [$e1 $e2]
    (map (nth $ e1) e2)))

(define $G.reverse
  (lambda [$e]
    (map 2#%2
         (sort/fn 2#(compare (2#%1 %1) (2#%1 %2))
                  (zip e (G.id (length e)))))))

(define $G.eq? (eq?/m group $ $))

(define $G.id?
  (lambda [$e]
    (eq? e (G.id (length e)))))

(define $group?
  (lambda [$g]
    (and (any G.id? g)
         (and (all (member? $ g) (map G.reverse g))
              (all (member? $ g)
                   (match-all g group
                     [<cons $e1 <cons $e2 _>> (G.* e1 e2)]))))))

;;
;; View
;;
(define $G.to-cycles
  (lambda [$e]
    (match (match-all (zip (G.id (length e)) e) (multiset [integer integer])
             [<cons [$m (& ^,m $n)] _> [m n]])
             (multiset [integer integer])
      {[(loop $i [1 $m]
          <cons [$x_i_1 $x_i_2]
           (loop $j [3 $n_i]
             <cons [,x_i_(- j 1) $x_i_j] ...>
             <cons [,x_i_(ref n i) ,x_i_1] ...>)>
          <nil>)
        (map (lambda [$i] (map (lambda [$j] x_i_j) (between 1 n_i))) (between 1 m))]})))

(define $G.from-cycles
  (lambda [$cs]
    (map 1#(sort/fn 2#(compare (2#%1 %1) (2#%1 %2)) (zip {(rac %1) @(rdc %1)} %1)) cs)))

;;
;; Symmetric groups
;;
(define $symmetric-group
  (lambda [$n]
    (match-all (between 1 n) (multiset integer)
      [(loop $i [1 n] <cons $a_i ...> <nil>)
       (map (lambda [$i] a_i) (between 1 n))])))

(define $s3 (symmetric-group 3))
(define $s4 (symmetric-group 4))
(define $s5 (symmetric-group 5))

(define $a3 (commutator-subgroup s3))
(define $a4 (commutator-subgroup s4))
(define $a5 (commutator-subgroup s5))

(define $v4 (commutator-subgroup a4))

;;
;; Normal groups
;;
(define $normal-subgroup?
  (lambda [$h $g]
    (all G.eq?
         (map 1#[(map (G.* %1 $) h) (map (G.* $ %1) h)]
              g))))

;;
;; Cyclic groups
;;
(define $gen-cyclic-group
  (lambda [$e]
    (until-by (G.id? $) (scanl G.* e (repeat1 e)))))

(define $cyclic-subgroups
  (lambda [$g]
    (unique/m group
              (map (gen-cyclic-group $)
                   g))))

(define $generators
  (lambda [$g]
    (map car (cyclic-subgroups g))))

(define $gen-group
  (lambda [$es]
    (let {[$cgs (map gen-cyclic-group es)]}
      (foldl G.** (car cgs) (cdr cgs)))))

;;
;; Binary operation
;;
(define $G.product
  (lambda [$g1 $g2]
    (unique (match-all [g1 g2] [group group]
              [[<cons $e1 _> <cons $e2 _>] (G.* e1 e2)]))))

(define $G.**
  (lambda [$g1 $g2]
    (let {[$pg (G.product g1 g2)]}
      (match (scanl 2#(let {[$ng (union (2#%1 %1) (G.product (2#%2 %1) %2))]} [ng (difference ng (2#%1 %1))]) [pg pg] (repeat1 pg))
             (list [group (set G.element)])
        {[<join _ <cons [$g <nil>]  _>> g]}))))

(define $G.//
  (lambda [$g1 $g2]
    (let {[$hs (difference/m (multiset G.element) (cyclic-subgroups g1) (cyclic-subgroups g2))]}
      (car (concat (map (lambda [$h]
                          (let {[$g2' (G.** h g2)]}
                            (if (include?/m group g1 g2')
                              (if (include?/m group g2' g1)
                                {h}
                                {(G.** h (G.// g1 g2'))})
                              {})))
                        hs))))))

;;
;; Commutator
;;
(define $commutator
  (lambda [$e1 $e2]
    (G.* (G.* (G.reverse e1) (G.reverse e2))
         (G.* e1 e2))))

(define $commutator-subgroup
  (lambda [$g]
    (letrec {[$es (unique (match-all g group
                            [<cons $e1 <cons $e2 _>> (commutator e1 e2)]))]}
      (if (group? es)
        es
        (gen-group es)))))

;;
;; Predicate on commutativity
;;
(define $abelian-group?
  (lambda [$g]
    (eq? 1
         (length (commutator-subgroup g)))))

(define $perfect-group?
  (lambda [$g]
    (eq? (length g)
         (length (commutator-subgroup g)))))
